# Generated by Django 5.2 on 2025-05-13 03:00

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Effect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(help_text='Description of what the effect does')),
                ('effect_type', models.CharField(choices=[('DAMAGE', 'Damage'), ('DEFENSE', 'Defense'), ('UTILITY', 'Utility'), ('CONTROL', 'Control'), ('SUPPORT', 'Support')], default='DAMAGE', max_length=50)),
                ('base_power', models.FloatField(default=1.0, help_text='Base power of the effect', validators=[django.core.validators.MinValueValidator(0.1)])),
                ('duration', models.IntegerField(help_text='Duration in frames (1 frame = 1/30 second)', validators=[django.core.validators.MinValueValidator(1)])),
                ('cooldown', models.IntegerField(default=0, help_text='Cooldown before the effect can be used again (in frames)', validators=[django.core.validators.MinValueValidator(0)])),
                ('area_of_effect', models.BooleanField(default=False, help_text='Whether the effect hits multiple targets')),
                ('proc_chance', models.IntegerField(default=100, help_text='Probability of the effect activating (0-100%)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Effect',
                'verbose_name_plural': 'Effects',
                'ordering': ['effect_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Objective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(help_text='Describe the objective')),
                ('difficulty', models.CharField(choices=[('EASY', 'Easy'), ('MEDIUM', 'Medium'), ('HARD', 'Hard'), ('EXPERT', 'Expert')], default='MEDIUM', max_length=50)),
                ('energy_cost', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0)])),
                ('rewards', models.JSONField(default=dict, help_text='Rewards for completing the objective')),
                ('required_level', models.IntegerField(default=1, help_text='Required player level to attempt this objective', validators=[django.core.validators.MinValueValidator(1)])),
                ('enemy_types', models.JSONField(default=list, help_text='Types of enemies that appear in this objective')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Objective',
                'verbose_name_plural': 'Objectives',
                'ordering': ['difficulty', 'required_level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Ability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(help_text='Description of the ability')),
                ('ability_type', models.CharField(choices=[('PASSIVE', 'Passive'), ('ACTIVE', 'Active'), ('CONDITIONAL', 'Conditional'), ('TRIGGERED', 'Triggered')], default='PASSIVE', max_length=50)),
                ('target_traits', models.JSONField(default=list, help_text='List of enemy traits this ability affects')),
                ('requirements', models.JSONField(default=dict, help_text='Requirements to unlock/use this ability')),
                ('energy_cost', models.IntegerField(default=0, help_text='Energy cost to use the ability (if active)', validators=[django.core.validators.MinValueValidator(0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('effects', models.ManyToManyField(help_text='Effects this ability can produce', related_name='abilities', to='Catspedia.effect')),
            ],
            options={
                'verbose_name': 'Ability',
                'verbose_name_plural': 'Abilities',
                'ordering': ['ability_type', 'name'],
            },
        ),
    ]
